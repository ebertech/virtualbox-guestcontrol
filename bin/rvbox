#!/usr/bin/env ruby
require File.expand_path("../../lib/virtualbox-guestcontrol.rb", __FILE__)

class VirtualBoxCommand < Clamp::Command
  option ["-u", "--username"], "USERNAME", "username to log in as"
  option ["-p", "--password"], "PASSWORD", "password to log in as"
  option ["-t", "--timeout"], "TIMEOUT", "timeout in seconds"
  option ["-b", "--vboxmanage"], "PATH", "path to VBoxManage"

  def virtual_box
    VirtualBox::GuestControl::Runner.configure do |c|
      c.name = name
      c.username = username
      c.password = password
      c.vbox_manage = vboxmanage unless vboxmanage.nil?
      c.default_timeout = timeout unless vboxmanage.nil?
    end
    VirtualBox::GuestControl::Runner.new
  end

  subcommand "start", "start up the given VM" do
    parameter "NAME", "name of virtual machine"

    def execute
      virtual_box.start!
    end
  end

  subcommand "shutdown", "shutdown the given VM" do
    parameter "NAME", "name of virtual machine"

    def execute
      virtual_box.shutdown!
    end
  end

  subcommand "restart", "restart the given VM" do
    parameter "NAME", "name of virtual machine"

    def execute
      virtual_box.restart!
    end
  end

  subcommand "info", "list all known info about the VM" do
    parameter "NAME", "name of virtual machine"

    def execute
      virtual_box.state.tap do |map|
        map.keys.sort.each do |key|
          puts [key, map[key]].join(": ")
        end
      end
    end
  end
  
  subcommand "usblist", "list usb devices on host" do
    def execute
      VirtualBox::GuestControl::Runner.usb_devices.each do |device|
        puts device.to_s
      end
    end
  end

  subcommand "usbdetach", "detach usb devices on host" do
    parameter "NAME", "name of virtual machine"
    
    def execute
      VirtualBox::GuestControl::Runner.usb_devices.each do |device|
        device.detach(name)
      end
    end
  end

  subcommand "status", "says if the vm is booted or not" do
    parameter "NAME", "name of virtual machine"

    def execute
      if virtual_box.started?
        puts "VM is started"
      else
        puts "VM is shutdown"
      end
    end
  end
  
  subcommand "list", "lists the available VMs" do    
    option ["--uuid"], :flag, "show only uuid", :default => false
    option ["--name"], :flag, "show only name", :default => false    
    
    def execute
      VirtualBox::GuestControl::Runner.virtual_machines.each do |name, uuid|
        if uuid?
          puts uuid
        elsif name?
          puts name
        else
          puts [name, uuid].join("\t")
        end
      end
    end
  end
  
  subcommand "execute", "execute a given command" do
    parameter "NAME", "name of virtual machine"
    parameter "[COMMAND_PARAMETERS] ...", "command and parameters to pass to the VM", :attribute_name => :command_parameters
    
    def execute
      image_name, arguments = command_parameters
      virtual_box.execute *command_parameters
    end
  end
end

VirtualBoxCommand.run(ARGV)

